#!/bin/bash
#
# data feeds

# Initialize Environment Variables
ask_amount="7531" # this is how much you want coming in
respond_amount="2" # this is how much is going out
ip="192.168.12.208"
port="10104"
user="secret"
pass="pass"
in_message="You are buying Quest for Designs Qombucha"
d_port="24862"
uuid=$(uuidgen)
out_message=uuid

scid="0000000000000000000000000000000000000000000000000000000000000000"

# Initialize parameters
if [ ! -d assets/ ]; then
  mkdir assets/
fi
pong_dir="assets/"
pong_db="$pong_dir/$ask_amount.sales.db"
iaddress_text_file="$pong_dir/$ask_amount.iaddress.txt"
iaddress_qr_file="$pong_dir/$ask_amount.iaddress_qrcode.png"
touch "$pong_db"

# Initialize ping module
export_iaddress=$(curl -s -X POST \
  "http://$ip:$port/json_rpc" \
  -u "$user:$pass" \
  -H 'content-type: application/json' \
  -d '{
    "jsonrpc": "2.0",
    "id": "1",
    "method": "MakeIntegratedAddress",
    "params": {
      "payload_rpc": [
        {
          "name": "C",
          "datatype": "S",
          "value": "'"${in_message}"'"
        },
        {
          "name": "D",
          "datatype": "U",
          "value": '"${d_port}"'
        },
        {
          "name": "N",
          "datatype": "U",
          "value": 0
        },
        {
          "name": "V",
          "datatype": "U",
          "value": '"${ask_amount}"'
        }
      ]
    }
}')

echo "Welcome to your pong server."
echo "$export_iaddress" | jq -r '.result.integrated_address' > "$iaddress_text_file"
echo "Your integrated address is below:"
iaddress=$(cat "$iaddress_text_file")
echo "$iaddress"
qrencode -o $iaddress_qr_file "$iaddress"
echo "A copy of your integrated address has been saved in $pong_dir as a txt file and a qr code"
echo "Already processed transactions found in the database will be skipped automatically"

# Initialize pong module
while true; do
# Initialize Sales List
export_transfers=$(
  curl -s -X POST \
  http://$ip:$port/json_rpc \
  -u $user:$pass \
  -H 'content-type: application/json' \
  -d '{
    "jsonrpc": "2.0",
    "id": "1",
    "method": "GetTransfers",
    "params": {
        "out": false,
        "in": true
    }
}')
# echo $export_transfers
# Extract sales list with jq and store it in a variable
sales_list=$(
echo "$export_transfers" |
jq -r '.result.entries[] |
select(.payload_rpc != null) |
select(.payload_rpc[] |
select(.name == "R" and .datatype == "A")) |
{
  height,
  blockhash,
  txid,
  amount,
  fees,
  time,
  dstport,
  payload_rpc: [
    .payload_rpc[] |
    {
      name,
      datatype,
      value
    }
  ]
} |
(.time) +
" " +
(.payload_rpc[] | select(.name == "R" and .datatype == "A") | .value) +
" " +
(.amount | tostring) +
" " +
(.txid) +
" " +
(.dstport | tostring)'
)
# echo $sales_list
  # echo "Scanning your wallet..."
  while read -r sale; do
    time=$(echo "$sale" | awk '{print $1}')
    addr=$(echo "$sale" | awk '{print $2}')
    amount=$(echo "$sale" | awk '{print $3}')
    txid=$(echo "$sale" | awk '{print $4}')
    dst_port=$(echo "$sale" | awk '{print $5}')
    already_processed=$(grep "$time" "$pong_db")
    if [[ "$ask_amount" =~ "$amount" ]]; then
    if [[ "$dst_port" =~ "$d_port" ]]; then
    if [[ "$already_processed" =~ "$time" ]]; then
      # echo "$txid is already processed, skipping"
      continue
    fi
      echo "$addr sent $amount at $time"
      echo "Dispatching transfer"
 payload=$(jq -n --arg respond_amount "$respond_amount" --arg addr "$addr" --arg amount "$amount" --arg scid "$scid" --arg out_message "$out_message" --arg dst_port "$dst_port" \
  '{
    "jsonrpc": "2.0",
    "id": "1",
    "method": "transfer",
    "params": {
       "ringsize": 16,
       "transfers":
       [
        {
          "scid": $scid,
          "destination": $addr,
          "amount": $respond_amount,
          "payload_rpc":
          [
            {
              "name": "C",
              "datatype": "S",
              "value": $out_message
            }
          ]
        }
      ]
    }
  }'
)
response=$(curl -u "$user":"$pass" -X POST -H 'Content-type: application/json' -d "$payload" "http://$ip:$port/json_rpc")

pong_response=$(echo $response | jq -r '.result.txid')
 echo "TXID: $pong_response"
      printf "%s\n" "$sale" >> "$pong_db"
      echo "Pong Server has successfully dispatched pong."
    fi
    fi
  done <<< "$sales_list"
  # echo "Wallet scan complete and will scan again every 18 seconds."
  sleep 18
done
